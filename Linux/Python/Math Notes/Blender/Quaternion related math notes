bl_info = {
    "name": "New Object",
    "author": "Your Name Here",
    "version": (1, 0),
    "blender": (2, 75, 0),
    "location": "View3D > Add > Mesh > New Object",
    "description": "Adds a new Mesh Object",
    "warning": "",
    "wiki_url": "",
    "category": "Add Mesh",
    }


import bpy
from bpy.types import Operator
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector

print("SMD")
class QUAT:
    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        
def CONJ(q):
    return(QUAT(q.a, -q.b, -q.c, -q.d))
        
def HP(q, p):
    return(
        QUAT(
            (q.a*p.a)-(q.b*p.b)-(q.c*p.c)-(q.d*p.d),
            (q.a*p.b)+(q.b*p.a)+(q.c*p.d)-(q.d*p.c),
            (q.a*p.c)-(q.b*p.d)+(q.c*p.a)+(q.d*p.b),
            (q.a*p.d)+(q.b*p.c)-(q.c*p.b)+(q.d*p.a)))

def add_object(self, context):
    scale_x = self.scale.x
    scale_y = self.scale.y
    print(self.Q_Rot)
    
    a1 = QUAT(self.Q_Rot[0], self.Q_Rot[1], self.Q_Rot[2], self.Q_Rot[3])
    a2 = QUAT(0, self.Point.x, self.Point.y, self.Point.z)
    
    NewRot = HP(a1,a2)
    NewLoc= HP(HP(a1,a2), CONJ(a1))
    
    Empty_Rotation = (NewRot.a, NewRot .b, NewRot .c, NewRot .d)
    Empty_Location = (NewLoc.b, NewLoc.c, NewLoc.d)
    
    



    newEmpty = bpy.data.objects.new(name="New Empty")
    newEmpty.object.empty_add(
    type='PLAIN_AXES', 
    radius=1.0, 
    view_align=False, 
    location=(NewLoc.b, NewLoc.c, NewLoc.d), 
    rotation=(NewRot.a, NewRot.b, NewRot.c, NewRot.d), 
    layers=(False, False, False, False, False, False, 
            False, False, False, False, False, False, 
            False, False, False, False, False, False, 
            False, False))
    # useful for development when the mesh may be invalid.
    # mesh.validate(verbose=True)
    
    object_data_add(context, newEmpty, operator=self)


class OBJECT_OT_add_object(Operator, AddObjectHelper):
    """Create a new Mesh Object"""
    bl_idname = "mesh.add_object"
    bl_label = "Add Mesh Object"
    bl_options = {'REGISTER', 'UNDO'}

    scale = FloatVectorProperty(
            name="SCALE",
            default=(1.0, 1.0, 1.0),
            subtype='TRANSLATION',
            description="scaling",
            )
  
    Q_Rot= FloatVectorProperty(
        name = "Quaternion Rotation",
        default = (1.0, 0.0, 0.0, 0),
        subtype = 'QUATERNION',
        unit = 'ROTATION',
        size = 4,
        description = "A B C D",)
        
    Point = FloatVectorProperty(
        name = "Axis",
        default = (0, 0, 0),
        subtype = 'TRANSLATION',
        description = "Rotation Axis",)

    def execute(self, context):

        add_object(self, context)

        return {'FINISHED'}


# Registration

def add_object_button(self, context):
    self.layout.operator(
        OBJECT_OT_add_object.bl_idname,
        text="Add Object",
        icon='PLUGIN')


# This allows you to right click on a button and link to the manual
def add_object_manual_map():
    url_manual_prefix = "https://docs.blender.org/manual/en/dev/"
    url_manual_mapping = (
        ("bpy.ops.mesh.add_object", "editors/3dview/object"),
        )
    return url_manual_prefix, url_manual_mapping


def register():
    bpy.utils.register_class(OBJECT_OT_add_object)
    bpy.utils.register_manual_map(add_object_manual_map)
    bpy.types.INFO_MT_mesh_add.append(add_object_button)


def unregister():
    bpy.utils.unregister_class(OBJECT_OT_add_object)
    bpy.utils.unregister_manual_map(add_object_manual_map)
    bpy.types.INFO_MT_mesh_add.remove(add_object_button)


if __name__ == "__main__":
    register()
